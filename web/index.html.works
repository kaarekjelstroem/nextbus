<!DOCTYPE html>
<html>
<head>
    <title>Next Bus</title>
    <!-- Twitter bootstrap -->
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap-theme.min.css">
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.9.1.js"></script>
    <script type="text/javascript" src="//netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js"></script>
</head>
<body>

    <style>

        #map-canvas {
            width: 100%;
            height: 600px;
        }
        #wrapper {
            position: relative;
        }
        #over_map {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 99;
            width: 35%;
            background-color: rgba(245, 245, 245, 0.8);
            border-width: .2em;
            border-style: solid;
            border-color: black;
            padding: 7px;
        }
        #bus_time {
            position: absolute;
            top: 150px;
            right: 10px;
            z-index: 99;
            width: 35%;
            background-color: rgba(245, 245, 245, 0.8);
            border-width: .2em;
            border-style: solid;
            border-color: black;
            padding: 7px;
         }
    </style>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC8_nX9UAjPSNth57C0w1_v-5cZ5eL9Ex0&sensor=true"></script>
    <script type="text/javascript">
        function initGoogleMaps(latitude, longitude) {
            console.log('Loading map');
            var latLng = new google.maps.LatLng(latitude, longitude);
            var mapOptions = {
                   center: latLng,
                   zoom: 16
            };
            var map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
            var marker = new google.maps.Marker({
                 position: latLng,
                 map: map,
                 title: 'You are here!'
            });
         }
    </script>

    <div class="container">
        <h1>Next Bus</h1>
        <hr/>
        <div class="page"/>
    </div>

    <script>
        var latitude, longitude, agency = 'actransit', route = 'B';

        function setLocation() {


            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                        function(position) {
                            latitude = position.coords.latitude;
                            longitude = position.coords.longitude;

                            showRoutes(latitude, longitude);
                        },
                        function(error) {
                            console.log('No geolocation information available. Fall back to center of the universe.');
                            latitude = 37.7860099;
                            longitude = -122.4025387;

                            showRoutes(latitude, longitude);
                        }
                );
            } else {
                console.log('No geolocation information available. Fall back to center of the universe.');
                latitude = 37.7860099;
                longitude = -122.4025387;

                showRoutes(latitude, longitude);
            }

        }

        setLocation();

    </script>

    <script type="text/template" id="route-list-template">
        <div id="wrapper">
            <div id="over_map">
                <h5>At <%= geolocation[0].get('results')[0].formatted_address %></h5>

                Districts: <select class="selectpicker" data-style="btn-success" id="district-selector">
                    <% _.each(districts, function(district) {
                            key = district.get('lat')+ ',' + district.get('lon');
                            if (seldistrict == key) {
                                selected = 'selected';
                            } else {
                                selected = '';
                            }
                    %>

                        <option <%= selected %> value="<%= key %>"><%= district.get('region') %></option>
                    <% }); %>
                </select>
                <br/>

                <% if (routes.length > 0) { %>

                Bus routes: <select class="selectpicker" data-style="btn-success" id="route-selector">
                    <% _.each(routes, function(route) {
                        key = route.get('route').agencytag + ':' + route.get('route').routetag;
                        if (selroute == key) {
                            selected = 'selected';
                        } else {
                            selected = '';
                        }
                %>
                       <!--<option><%= route.get('route').agencyTitle %>: <%= route.get('route').title %></option>   -->
                       <option <%= selected%> value="<%= key %>"><%= route.get('route').title %></option>
                    <% }); %>
                </select>

                <% } else { %>

                No available bus routes in this area!

                <% } %>

            </div>
            <div id="bus_time">
                <h5>Schedule</h5>
                <table class="table table-striped table-bordered table-condensed">
                    <%
                    if(schedules) {
                    _.each(schedules[0].get('route').schedule, function(schedule) {

                    %>
                    <tr>
                        <td><%= schedule.stop.title %></td>
                        <td><%= schedule.stop.time %></td>
                    </tr>
                    <%
                    });
                    }
                    %>
                </table>
            </div>
            <div id="map-canvas"/>
        </div>
    </script>

    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.0/backbone-min.js"></script>

    <script>

        function showRoutes(latitude, longitude) {

            console.log('lat:' + latitude + ' lon:' + longitude);

            var Districts = Backbone.Collection.extend({
                url: '/regions'
            })

            var Geolocation = Backbone.Collection.extend({
                initialize: function() {
                    this.updateUrl(latitude, longitude);
                },
                updateUrl: function(lat, lon) {
                    this.url = 'http://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat + ',' + lon + '&sensor=false';
                },
                url: ''
            })

            var Routes = Backbone.Collection.extend({
                initialize: function() {
                    this.updateUrl(latitude, longitude);
                },
                updateUrl: function(lat, lon) {
                    this.url = '/routesnearlat/' + lat + '/lon/' + lon + '/precision/4';
                },
                url: ''
            });

            var Schedules = Backbone.Collection.extend({
                initialize: function() {
                    this.updateUrl(agency, route);
                },
                updateUrl: function(agency, route) {
                    this.url = '/agency/' + agency + '/route/' + route + '/nextbus';
                    console.log("Scedules.updateUrl:" + this.url);
                },
                url: ''
            });

            var routes = new Routes();
            var geolocation = new Geolocation();
            var districts = new Districts();
            var schedules = new Schedules();

            var RouteList = Backbone.View.extend({
                el : '.page',
                events: {
                    "change #district-selector": "districtSelected",
                    "change #route-selector": "routeSelected"
                },
                districtSelected: function() {
                    var latLng = this.$('#district-selector').val().split(',');
                    latitude = latLng[0], longitude = latLng[1];
                    geolocation.updateUrl(latitude, longitude);
                    routes.updateUrl(latitude, longitude);

                    this.render();
                },
                routeSelected: function() {
                    var agencyRoute = this.$('#route-selector').val().split(':');
                    agency = agencyRoute[0];
                    route = agencyRoute[1];
                    schedules.updateUrl(agency, route);

                    this.render();
                },
                render : function() {
                    var that = this;    // This is out of scope in the anonymous function below

                    if(this.$('#district-selector').val()) {
                        seldistrict = this.$('#district-selector').val().split(',');
                    } else {
                        seldistrict = '37.4292599' + ',' + '37.4292599';
                    }

                    if(this.$('#route-selector').val()) {
                        selroute = this.$('#route-selector').val().split(',');
                        agency = selroute[0];
                        route = selroute[1];
                    } else {
                        selroute = '';
                    }

                    routes.fetch({
                        success : function(routes) {
                            console.log(routes);

                            geolocation.fetch({
                                success : function(geolocations) {
                                    console.log(geolocations);

                                    districts.fetch({
                                        success : function(districts) {
                                            console.log(districts);

                                            schedules.fetch({
                                                success : function(schedules) {
                                                    console.log(schedules);

                                                    var template = _.template($('#route-list-template').html(),
                                                            {
                                                                routes: routes.models,
                                                                geolocation: geolocations.models,
                                                                districts: districts.models,
                                                                schedules: schedules.models,
                                                                seldistrict: seldistrict,
                                                                selroute: selroute
                                                            });
                                                    that.$el.html(template);
                                                    initGoogleMaps(latitude, longitude);
                                                }
                                            })
                                        }
                                    })
                                }
                            })
                        }
                    });

                }
            });

            //---- BEGIN EXP
            var AddressView = Backbone.View.extend({
                el : '.page',
                events: {
                    "change #district-selector": "districtSelected",
                    "change #route-selector": "routeSelected"
                },
                districtSelected: function() {
                    var latLng = this.$('#district-selector').val().split(',');
                    latitude = latLng[0], longitude = latLng[1];
                    geolocation.updateUrl(latitude, longitude);
                    routes.updateUrl(latitude, longitude);

                    this.render();
                },
                routeSelected: function() {
                    var agencyRoute = this.$('#route-selector').val().split(':');
                    agency = agencyRoute[0];
                    route = agencyRoute[1];
                    schedules.updateUrl(agency, route);

                    this.render();
                },
                render : function() {
                    var that = this;    // This is out of scope in the anonymous function below

                    if(this.$('#district-selector').val()) {
                        seldistrict = this.$('#district-selector').val().split(',');
                    } else {
                        seldistrict = '37.4292599' + ',' + '37.4292599';
                    }

                    if(this.$('#route-selector').val()) {
                        selroute = this.$('#route-selector').val().split(',');
                        agency = selroute[0];
                        route = selroute[1];
                    } else {
                        selroute = '';
                    }

                    routes.fetch({
                        success : function(routes) {
                            console.log(routes);

                            geolocation.fetch({
                                success : function(geolocations) {
                                    console.log(geolocations);

                                    districts.fetch({
                                        success : function(districts) {
                                            console.log(districts);

                                            schedules.fetch({
                                                success : function(schedules) {
                                                    console.log(schedules);

                                                    var template = _.template($('#route-list-template').html(),
                                                            {
                                                                routes: routes.models,
                                                                geolocation: geolocations.models,
                                                                districts: districts.models,
                                                                schedules: schedules.models,
                                                                seldistrict: seldistrict,
                                                                selroute: selroute
                                                            });
                                                    that.$el.html(template);
                                                    initGoogleMaps(latitude, longitude);
                                                }
                                            })
                                        }
                                    })
                                }
                            })
                        }
                    });

                }
            });

            //---- END EXP
            var Router = Backbone.Router.extend({
                routes : {
                    '' : 'home'
                }
            });

            var routeList = new RouteList();
            var router = new Router();
            router.on('route:home', function () {
                routeList.render();
            })

            Backbone.history.start();

        }

    </script>
</body>
</html>